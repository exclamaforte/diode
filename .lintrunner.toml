# Linter configuration for diode project
# Based on PyTorch's lintrunner with Python-relevant lints only

[[linter]]
code = 'FLAKE8'
include_patterns = ['**/*.py']
exclude_patterns = [
    '.git/**',
    'build/**',
    'venv/**',
    '**/*.pyi',
]
command = [
    'python3',
    'tools/linter/adapters/flake8_linter.py',
    '--',
    '@{{PATHSFILE}}'
]
init_command = [
    'python3',
    'tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'flake8==6.1.0',
    'flake8-bugbear==23.3.23',
    'flake8-comprehensions==3.15.0',
    'flake8-executable==2.1.3',
    'flake8-logging-format==0.9.0',
    'flake8-pyi==23.3.1',
    'flake8-simplify==0.19.3',
    'mccabe==0.7.0',
    'pycodestyle==2.11.1',
    'pyflakes==3.1.0',
]

[[linter]]
code = 'MYPY'
include_patterns = [
    'diode/**/*.py',
    'diode/**/*.pyi',
    'diode_common/**/*.py',
    'diode_common/**/*.pyi',
    'tests/**/*.py',
    'workflows/**/*.py',
]
command = [
    'python3',
    'tools/linter/adapters/mypy_linter.py',
    '--config=mypy.ini',
    '--',
    '@{{PATHSFILE}}'
]
init_command = [
    'python3',
    'tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'mypy==1.16.0',
    'types-requests==2.27.25',
    'types-pyyaml==6.0.1',
    'types-setuptools==79.0.0.20250422',
]

[[linter]]
code = 'TYPEIGNORE'
include_patterns = ['**/*.py', '**/*.pyi']
command = [
    'python3',
    'tools/linter/adapters/grep_linter.py',
    '--pattern=# type:\s*ignore([^\[]|$)',
    '--linter-name=TYPEIGNORE',
    '--error-name=unqualified type: ignore',
    """--error-description=\
        This line has an unqualified `type: ignore`; \
        please convert it to `type: ignore[xxxx]`\
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'NOQA'
include_patterns = ['**/*.py', '**/*.pyi']
command = [
    'python3',
    'tools/linter/adapters/grep_linter.py',
    '--pattern=# noqa([^:]|$)',
    '--linter-name=NOQA',
    '--error-name=unqualified noqa',
    """--error-description=\
        This line has an unqualified `noqa`; \
        please convert it to `noqa: XXXX`\
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'NEWLINE'
include_patterns=['**']
exclude_patterns=[
    'third_party/**',
    '**/*.bat',
    '**/*.expect',
    '**/*.ipynb',
    '**/*.ps1',
    '**/*.ptl',
    '**/*.png',
    '**/*.gz',
    '**/*.patch',
]
command = [
    'python3',
    'tools/linter/adapters/newlines_linter.py',
    '--',
    '@{{PATHSFILE}}',
]
is_formatter = true

[[linter]]
code = 'SPACES'
include_patterns = ['**']
exclude_patterns = [
    '**/*.diff',
    '**/*.patch',
    'third_party/**',
]
command = [
    'python3',
    'tools/linter/adapters/grep_linter.py',
    '--pattern=[[:blank:]]$',
    '--linter-name=SPACES',
    '--error-name=trailing spaces',
    '--replace-pattern=s/[[:blank:]]+$//',
    """--error-description=\
        This line has trailing spaces; please remove them.\
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'TABS'
include_patterns = ['**']
exclude_patterns = [
    '**/*.svg',
    '**/*Makefile',
    'third_party/**',
    '**/.gitattributes',
    '**/.gitmodules',
    '.lintrunner.toml',
    '**/*.patch',
]
command = [
    'python3',
    'tools/linter/adapters/grep_linter.py',
    # @lint-ignore TXT2
    '--pattern=	',
    '--linter-name=TABS',
    '--error-name=saw some tabs',
    '--replace-pattern=s/\t/    /',
    """--error-description=\
        This line has tabs; please replace them with spaces.\
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'ROOT_LOGGING'
include_patterns = [
    '**/*.py',
]
exclude_patterns = [
    'tools/**',
    'tests/**',
    'workflows/**',
]
command = [
    'python3',
    'tools/linter/adapters/grep_linter.py',
    '--pattern=logging\.(debug|info|warn|warning|error|critical|log|exception)\(',
    '--replace-pattern=s/logging\.(debug|info|warn|warning|error|critical|log|exception)\(/log.\1(/',
    '--linter-name=ROOT_LOGGING',
    '--error-name=use of root logger',
    """--error-description=\
        Do not use root logger (logging.info, etc) directly; instead \
        define 'log = logging.getLogger(__name__)' and call, e.g., log.info().
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'CODESPELL'
command = [
    'python3',
    'tools/linter/adapters/codespell_linter.py',
    '--',
    '@{{PATHSFILE}}'
]
include_patterns = [
    '**',
]
exclude_patterns = [
    'third_party/**',
    '.git/**',
    'build/**',
    'venv/**',
]
init_command = [
    'python3',
    'tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'codespell[toml]==2.4.1',
]
is_formatter = true

# usort + ruff-format
[[linter]]
code = 'PYFMT'
include_patterns = [
    '**/*.py',
    '**/*.pyi',
]
command = [
    'python3',
    'tools/linter/adapters/pyfmt_linter.py',
    '--',
    '@{{PATHSFILE}}'
]
exclude_patterns = [
    'third_party/**/*.py',
    'third_party/**/*.pyi',
]
init_command = [
    'python3',
    'tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    '--no-black-binary',
    'black==23.12.1',
    'usort==1.0.8.post1',
    'isort==6.0.1',
    'ruff==0.12.2',
]
is_formatter = true

[[linter]]
code = 'PYPROJECT'
command = [
    'python3',
    'tools/linter/adapters/pyproject_linter.py',
    '--',
    '@{{PATHSFILE}}'
]
include_patterns = [
    "**/pyproject.toml",
]
init_command = [
    'python3',
    'tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'packaging==25.0',
    'tomli==2.2.1 ; python_version < "3.11"',
]

[[linter]]
code = 'RUFF'
include_patterns = [
    '**/*.py',
    '**/*.pyi',
    '**/*.ipynb',
    'pyproject.toml',
]
exclude_patterns = [
    'third_party/**',
    'build/**',
    'venv/**',
]
command = [
    'python3',
    'tools/linter/adapters/ruff_linter.py',
    '--config=pyproject.toml',
    '--show-disable',
    '--',
    '@{{PATHSFILE}}'
]
init_command = [
    'python3',
    'tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'ruff==0.12.2',
]
is_formatter = true

[[linter]]
code = 'ERROR_PRONE_ISINSTANCE'
include_patterns = [
    'diode/**/*.py',
    'diode_common/**/*.py',
]
command = [
    'python3',
    'tools/linter/adapters/grep_linter.py',
    '--pattern=isinstance\([^)]+(int|float)\)',
    '--linter-name=ERROR_PRONE_ISINSTANCE',
    '--error-name=error prone isinstance',
    """--error-description=\
        This line has an isinstance call that directly refers to \
        int or float.  This is error-prone because you may also \
        have wanted to allow other numeric types in your test.  \
        Consider using more specific type checking or type aliases.
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'CONTEXT_DECORATOR'
include_patterns = [
    'diode/**/*.py',
    'diode_common/**/*.py',
]
command = [
    'python3',
    'tools/linter/adapters/grep_linter.py',
    '--pattern=@.*(preserve_rng_state|clear_frame|with_fresh_cache_if_config)',
    '--linter-name=CONTEXT_DECORATOR',
    '--error-name=avoid context decorator',
    """--error-description=\
        Do not use context manager as decorator as it breaks cProfile traces.  Use it as \
        a context manager instead\
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'IMPORT_LINTER'
command = [
    'python3',
    'tools/linter/adapters/import_linter.py',
    '--',
    '@{{PATHSFILE}}'
]
include_patterns = [
   'diode/**/*.py',
   'diode_common/**/*.py',
]
is_formatter = false
